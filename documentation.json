{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0e31d1f894141a8f7199ef74a987b1b9a78e66e57ae15139a5161ef422bc6a154a6b95ee6add7182b4ce901df5e80a7e4956f045f29f051277989489397af5e6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Sandbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n  title = 'Sandbox';\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\r\n  display: flex;\r\n  flex-direction: column;\r\n gap: 16px;\r\n}",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"content\"></div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-2920e3d50b7ad8d307837bb20f5cb96dc5b26304be707910cb845bc65b3a3c58f1605598d9650f51e3c245054f7781142f74c8a8bcbbb8225d2971f142b9a355",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sandbox-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"emitClickEvent()\"\n  (mouseenter)=\"emitMouseenterEvent()\"\n  (mouseleave)=\"emitMouseleaveEvent()\"\n  (focus)=\"emitFocusEvent()\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  <ng-container *ngIf=\"iconPosition === 'left'\">\n    <span *ngIf=\"icon\" class=\"icon left-icon\">{{ icon }}</span>\n    <img *ngIf=\"iconUrl && iconPosition === 'left'\" class=\"icon left-icon\" [src]=\"iconUrl\" alt=\"Icon\" />\n  </ng-container>\n  {{ label }}\n  <ng-container *ngIf=\"iconPosition === 'right'\">\n    <span *ngIf=\"icon\" class=\"icon right-icon\">{{ icon }}</span>\n    <img *ngIf=\"iconUrl && iconPosition === 'right'\" class=\"icon right-icon\" [src]=\"iconUrl\" alt=\"Icon\" />\n  </ng-container>\n\n  <ng-container *ngIf=\"state === 'loading'\">\n  <img class=\"spinner-icon\" src=\"./spinner.svg\" alt=\"Loading Spinner\" />\n</ng-container>\n\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use?\n",
                    "description": "<p>What background color to use?</p>\n",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "\"none\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat is the icon position?\n",
                    "description": "<p>What is the icon position?</p>\n",
                    "line": 77,
                    "type": "\"left\" | \"right\" | \"none\"",
                    "decorators": []
                },
                {
                    "name": "iconUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat is the icon URL (optional)?\n",
                    "description": "<p>What is the icon URL (optional)?</p>\n",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "\"Button\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1680,
                            "end": 1693,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1681,
                                "end": 1689,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nWhat is the label of the button\n\n",
                    "description": "<p>What is the label of the button</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loadingIconUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat is the loading icon URL (optional)?\n",
                    "description": "<p>What is the loading icon URL (optional)?</p>\n",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat is the size of the button?\n",
                    "description": "<p>What is the size of the button?</p>\n",
                    "line": 57,
                    "type": "\"slim\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat is the state of this button?\n",
                    "description": "<p>What is the state of this button?</p>\n",
                    "line": 45,
                    "type": "\"enabled\" | \"hovered\" | \"focused\" | \"pressed\" | \"disabled\" | \"loading\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat is the variant of this button?\n",
                    "description": "<p>What is the variant of this button?</p>\n",
                    "line": 39,
                    "type": "\"filled\" | \"outlined\" | \"text\" | \"elevated\" | \"tonal\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClick handler\n",
                    "description": "<p>Click handler</p>\n",
                    "line": 89,
                    "type": "EventEmitter"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFocus handler\n",
                    "description": "<p>Focus handler</p>\n",
                    "line": 107,
                    "type": "EventEmitter"
                },
                {
                    "name": "onMouseenter",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMouse enter handler\n",
                    "description": "<p>Mouse enter handler</p>\n",
                    "line": 95,
                    "type": "EventEmitter"
                },
                {
                    "name": "onMouseleave",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMouse leave handler\n",
                    "description": "<p>Mouse leave handler</p>\n",
                    "line": 101,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitClickEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "emitFocusEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "emitMouseenterEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "emitMouseleaveEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { Component, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n  selector: \"sandbox-button\",\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"emitClickEvent()\"\n  (mouseenter)=\"emitMouseenterEvent()\"\n  (mouseleave)=\"emitMouseleaveEvent()\"\n  (focus)=\"emitFocusEvent()\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  <ng-container *ngIf=\"iconPosition === 'left'\">\n    <span *ngIf=\"icon\" class=\"icon left-icon\">{{ icon }}</span>\n    <img *ngIf=\"iconUrl && iconPosition === 'left'\" class=\"icon left-icon\" [src]=\"iconUrl\" alt=\"Icon\" />\n  </ng-container>\n  {{ label }}\n  <ng-container *ngIf=\"iconPosition === 'right'\">\n    <span *ngIf=\"icon\" class=\"icon right-icon\">{{ icon }}</span>\n    <img *ngIf=\"iconUrl && iconPosition === 'right'\" class=\"icon right-icon\" [src]=\"iconUrl\" alt=\"Icon\" />\n  </ng-container>\n\n  <ng-container *ngIf=\"state === 'loading'\">\n  <img class=\"spinner-icon\" src=\"./spinner.svg\" alt=\"Loading Spinner\" />\n</ng-container>\n\n</button>`,\n  styleUrls: [\"./button.css\"],\n})\nexport class ButtonComponent {\n  /**\n   * What is the variant of this button?\n   */\n  @Input()\n  style!: \"filled\" | \"outlined\" | \"text\" | \"elevated\" | \"tonal\";\n\n  /**\n   * What is the state of this button?\n   */\n  @Input()\n  state!: \"enabled\" | \"hovered\" | \"focused\" | \"pressed\" | \"disabled\" | \"loading\";\n\n  /**\n   * What background color to use?\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * What is the size of the button?\n   */\n  @Input()\n  size!: \"slim\" | \"medium\" | \"large\";\n\n  /**\n   * What is the label of the button\n   *\n   * @required\n   */\n  @Input()\n  label = \"Button\";\n\n    /**\n   * What is the icon URL (optional)?\n   */\n\n  @Input() iconUrl?: string;\n\n   /**\n   * What is the icon position?\n   */\n\n  @Input() iconPosition: \"left\" | \"right\" | \"none\"  = \"none\";\n\n   /**\n   * What is the loading icon URL (optional)?\n   */\n\n  @Input() loadingIconUrl?: string;\n\n  /**\n   * Click handler\n   */\n  @Output()\n  onClick = new EventEmitter<string>();\n\n  /**\n   * Mouse enter handler\n   */\n  @Output()\n  onMouseenter = new EventEmitter<string>();\n\n  /**\n   * Mouse leave handler\n   */\n  @Output()\n  onMouseleave = new EventEmitter<string>();\n\n  /**\n   * Focus handler\n   */\n  @Output()\n  onFocus = new EventEmitter<string>();\n\n  public get classes(): string[] {\n    return [\n      \"sandbox-button\",\n      `sandbox-button--${this.size}`,\n      `sandbox-button--${this.style}`,\n      `sandbox-button--${this.state}`,\n    ];\n  }\n\n  emitClickEvent() {\n    this.onClick.emit(\"Button clicked\");\n  }\n\n  emitMouseenterEvent() {\n    this.onMouseenter.emit(\"Mouse enter\");\n  }\n\n  emitMouseleaveEvent() {\n    this.onMouseleave.emit(\"Mouse leave\");\n  }\n\n  emitFocusEvent() {\n    this.onFocus.emit(\"Focus\");\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* button.css */\n\n/* Base button styles */\n.sandbox-button {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 20px;\n  font-family: \"Arial\", sans-serif;\n  font-weight: bold;\n  text-align: center;\n  text-decoration: none;\n  transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n}\n\n/* Filled style */\n.sandbox-button--filled {\n  --button-fill: #fff;\n  color: var(--button-fill);\n  background-color: #0a598f;\n}\n\n.sandbox-button--filled:hover {\n  background-color: #2980b9;\n}\n\n/* Outlined style */\n.sandbox-button--outlined {\n  --button-fill: #0a598f;\n  color: var(--button-fill);\n  background-color: #fff;\n  border: 2px solid var(--button-fill);\n}\n\n.sandbox-button--outlined:hover {\n  color: #fff;\n  background-color: #0a598f;\n}\n\n/* Text style */\n.sandbox-button--text {\n  --button-fill: #0a598f;\n  color: var(--button-fill);\n  background-color: transparent;\n}\n\n.sandbox-button--text:hover {\n  color: #2980b9;\n  background-color: transparent;\n}\n\n/* Elevated style */\n.sandbox-button--elevated {\n  --button-fill: #fff;\n  color: var(--button-fill);\n  background-color: #0a598f;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.sandbox-button--elevated:hover {\n  background-color: #2980b9;\n}\n\n/* Tonal style */\n.sandbox-button--tonal {\n  --button-fill: #333;\n  color: var(--button-fill);\n  background-color: #f8f8f8;\n}\n\n.sandbox-button--tonal:hover {\n  background-color: #e0e0e0;\n}\n\n/* Enabled state */\n.sandbox-button--enabled {\n  cursor: pointer;\n}\n\n/* Hovered state */\n.sandbox-button--hovered {\n  filter: brightness(1.2);\n}\n\n/* Focused state */\n.sandbox-button--focused {\n  outline: 2px solid var(--primary-color);\n}\n\n/* Pressed state */\n.sandbox-button--pressed {\n  transform: scale(0.98);\n}\n\n/* Disabled state */\n.sandbox-button--disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n/* Loading state */\n.sandbox-button--loading {\n  pointer-events: none;\n  cursor: default;\n  opacity: 0.8;\n}\n\n/* Slim size */\n.sandbox-button--slim {\n  padding: 8px 16px;\n}\n\n/* Medium size - Default size */\n.sandbox-button--medium {\n  padding: 10px 20px;\n}\n\n/* Large size */\n.sandbox-button--large {\n  padding: 12px 24px;\n}\n\n/* Icon styles */\n.sandbox-button .icon {\n  margin-right: 8px;\n  margin-left: 8px; /* Adjust spacing between text and icon */\n}\n\n.sandbox-button .icon {\n  fill: var(--button-fill); /* Icon color follows button text color */\n}\n\n/* Add more rules for other styles if needed */\n\n/* Spinner animation */\n.spinner-icon {\n  margin-right: 8px;\n  margin-left: 8px;\n  transform-origin: center;\n  animation: spin 2s linear infinite; /* Spin animation */\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* Adjust margin for right-aligned icon */\n.sandbox-button .right-icon {\n  margin-left: 8px; /* Adjust spacing between text and right-aligned icon */\n  margin-right: 8px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 109
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-27bfe6c88cafbe97c309874a724b34ee685244afdd967344336a50ab041d2ffe8671b45ea31e343d1ba877b93287bb02a55839ccb06f4c02e1528e3be5183cf2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { AppComponent } from \"./app.component\";\nimport { CommonModule } from \"@angular/common\";\n\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, BrowserAnimationsModule, CommonModule],\n  providers: [],\n  bootstrap: [AppComponent],\n  \n})\n\n\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Elevated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    style: 'elevated',\n    state: 'enabled',\n    size: 'large',\n    label: 'Elevated button',\n    iconUrl: './icon.svg',\n  },\n}"
            },
            {
                "name": "Filled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    style: 'filled',\n    state: 'enabled',\n    size: 'large',\n    label: 'Filled button',\n    iconUrl: './icon.svg',\n\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Sandox/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "Outlined",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    style: 'outlined',\n    state: 'enabled',\n    size: 'large',\n    label: 'Outlined button',\n    iconUrl: './icon.svg',\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    style: 'text',\n    state: 'enabled',\n    size: 'large',\n    label: 'Text button',\n    iconUrl: './icon.svg',\n  },\n}"
            },
            {
                "name": "Tonal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    style: 'tonal',\n    state: 'enabled',\n    size: 'large',\n    label: 'Tonal button',\n    iconUrl: './icon.svg',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/button.stories.ts": [
                {
                    "name": "Elevated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    style: 'elevated',\n    state: 'enabled',\n    size: 'large',\n    label: 'Elevated button',\n    iconUrl: './icon.svg',\n  },\n}"
                },
                {
                    "name": "Filled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    style: 'filled',\n    state: 'enabled',\n    size: 'large',\n    label: 'Filled button',\n    iconUrl: './icon.svg',\n\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Sandox/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Outlined",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    style: 'outlined',\n    state: 'enabled',\n    size: 'large',\n    label: 'Outlined button',\n    iconUrl: './icon.svg',\n  },\n}"
                },
                {
                    "name": "Text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    style: 'text',\n    state: 'enabled',\n    size: 'large',\n    label: 'Text button',\n    iconUrl: './icon.svg',\n  },\n}"
                },
                {
                    "name": "Tonal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    style: 'tonal',\n    state: 'enabled',\n    size: 'large',\n    label: 'Tonal button',\n    iconUrl: './icon.svg',\n  },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 70,
                "coverageCount": "12/17",
                "status": "good"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Elevated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Filled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outlined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tonal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}